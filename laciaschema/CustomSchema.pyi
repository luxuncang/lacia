import typing

class CustomSchema:
    class _Proxy_add(typing.Protocol):
        async def __call__(self, a, b) -> typing.Any: ...
        def a(self, value: typing.Any, /) -> CustomSchema._Proxy_add_collector: ...
        def b(self, value: typing.Any, /) -> CustomSchema._Proxy_add_collector: ...
    class _Proxy_add_collector(typing.Protocol):
        def __await__(self) -> typing.Generator[typing.Any, typing.Any, typing.Any]: ...
        def a(self, value: typing.Any, /) -> CustomSchema._Proxy_add_collector: ...
        def b(self, value: typing.Any, /) -> CustomSchema._Proxy_add_collector: ...
    add: _Proxy_add
    """"""

    class _Proxy_sub(typing.Protocol):
        async def __call__(self, a, b) -> typing.Any: ...
        def a(self, value: typing.Any, /) -> CustomSchema._Proxy_sub_collector: ...
        def b(self, value: typing.Any, /) -> CustomSchema._Proxy_sub_collector: ...
    class _Proxy_sub_collector(typing.Protocol):
        def __await__(self) -> typing.Generator[typing.Any, typing.Any, typing.Any]: ...
        def a(self, value: typing.Any, /) -> CustomSchema._Proxy_sub_collector: ...
        def b(self, value: typing.Any, /) -> CustomSchema._Proxy_sub_collector: ...
    sub: _Proxy_sub
    """"""

    value: typing.Awaitable[str]

    class Number:
        def __await__(self) -> typing.Generator[typing.Any, typing.Any, CustomSchema.Number]: ...
    
        class _Proxy___init__(typing.Protocol):
            async def __call__(self, ) -> None: ...
            def self(self, value: typing.Any, /) -> CustomSchema.Number._Proxy___init___collector: ...
        class _Proxy___init___collector(typing.Protocol):
            def __await__(self) -> typing.Generator[typing.Any, typing.Any, None]: ...
            def self(self, value: typing.Any, /) -> CustomSchema.Number._Proxy___init___collector: ...
        __init__: _Proxy___init__
        """"""
    
        class _Proxy_add(typing.Protocol):
            async def __call__(self, i: int) -> typing.Any: ...
            def self(self, value: typing.Any, /) -> CustomSchema.Number._Proxy_add_collector: ...
            def i(self, value: int, /) -> CustomSchema.Number._Proxy_add_collector: ...
        class _Proxy_add_collector(typing.Protocol):
            def __await__(self) -> typing.Generator[typing.Any, typing.Any, typing.Any]: ...
            def self(self, value: typing.Any, /) -> CustomSchema.Number._Proxy_add_collector: ...
            def i(self, value: int, /) -> CustomSchema.Number._Proxy_add_collector: ...
        add: _Proxy_add
        """"""
    
        class _Proxy_sub(typing.Protocol):
            async def __call__(self, i: int) -> typing.Any: ...
            def self(self, value: typing.Any, /) -> CustomSchema.Number._Proxy_sub_collector: ...
            def i(self, value: int, /) -> CustomSchema.Number._Proxy_sub_collector: ...
        class _Proxy_sub_collector(typing.Protocol):
            def __await__(self) -> typing.Generator[typing.Any, typing.Any, typing.Any]: ...
            def self(self, value: typing.Any, /) -> CustomSchema.Number._Proxy_sub_collector: ...
            def i(self, value: int, /) -> CustomSchema.Number._Proxy_sub_collector: ...
        sub: _Proxy_sub
        """"""
    
    class _Proxy_async_generator(typing.Protocol):
        async def __call__(self, i=10) -> typing.AsyncGenerator: ...
        def i(self, value: typing.AsyncGenerator, /) -> CustomSchema._Proxy_async_generator_collector: ...
    class _Proxy_async_generator_collector(typing.Protocol):
        def __await__(self) -> typing.Generator[typing.Any, typing.Any, typing.AsyncGenerator]: ...
        def i(self, value: typing.AsyncGenerator, /) -> CustomSchema._Proxy_async_generator_collector: ...
    async_generator: _Proxy_async_generator
    """"""

    class _Proxy_repeat(typing.Protocol):
        async def __call__(self, ) -> typing.Any: ...

    class _Proxy_repeat_collector(typing.Protocol):
        def __await__(self) -> typing.Generator[typing.Any, typing.Any, typing.Any]: ...

    repeat: _Proxy_repeat
    """"""
